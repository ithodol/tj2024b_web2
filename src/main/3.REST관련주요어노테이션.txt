[REST]
    웹의 자원을 관리하는 아키텍처(설계 구조)
    자원(Resources), 행동(Method) , 표현 개념
    HTTP 프로토콜 이용하여 클라이언트(유저) <--> 서버(톰캣) 간 통신을 일관성있게 구성
[REST API]
    REST 아키텍처에 따른 API
    REST 기반의 웹서비스 인터페이스 구축
    HTTP 요청을 통해 자원을 CRUD 할 수 있도록 제공
[RESTful API]
    RESTAPI의 아키텍처를 잘 사용하는지에 대한 개념
    조건
        일관성된 URI : /board, / member ...
        적절한 HTTP 메소드 사용 : GET, POST, PUT, DELETE
        무상태성 유지( VS 웹소켓 )
        응답 데이터는 JSON / XML 제공


[REST 관련 주요 어노테이션] : Spring web 에서는 REST 관련 어노테이션 지원
    @Controller
        HTTP 요청/응답 처리
            주로 HTML 반환

    @RestController
        HTTP 요청/응답 처리
            @ResponseBody 포함, 주로 JSON 반환

    @RequestMapping
        HTTP 요청 URL 매핑
            주로 공통 URL 정의할 때 클래스 위에서 사용

    @PostMapping
        HTTP 요청 POST 매핑
            Create, 생성, insert

    @GetMapping
        HTTP 요청 GET 매핑
            Read, 조회, select

    @PutMapping
        HTTP 요청 PUT 매핑
            Update, 수정, update

    @DeleteMapping
        HTTP 요청 DELETE 매핑
            Delete, 삭제, delete

    @ResponseBody
        HTTP 응답을 JSON 으로 자동 변환하여 응답, RestController 포함되기 때문에 생략 가능

    @RequestParam
        HTTP 요청의 queryString, form-Data 에서 기본타입 + 공식타입의 자바 값으로 매핑

    @RequestBody
        HTTP 요청의 body(본문) 'application/JSON' 에서 자바 객체 타입의 자바 값으로 매핑

    @ModelAttribute
        HTTP 요청 매핑의 기본 어노테이션 생략 가능, queryString 에서 사용


    관례적인 사용처
    @Controller = 동적페이지 반환(HTML, JSP ...)
    @RestController = 값(Resources / JSON / 값) 반환


    @RequestMapping = 공통 URL
    @XXXMapping(GET,POST,PUT,DELETE) = 특정 URL


    @RequestParam = queryString
    @RequestBody = body
    @ModelAttribute(생략가능) = form-Date



